extends layout
block page
	- var menu = 'index'
block content
	- var dataString = JSON.stringify(data)
	- var jsonString = JSON.stringify(json)
	input(type='hidden', class='data-json', value= dataString)
	input(type='hidden', class='data-json-json', value= jsonString)
	textarea(class="test")
	if (data.length === 0)
		h3 Add a stock to the chart by symbol lookup
	else
		h3 Search results
		div#chart.col-xs-12.col-md-6(class='vis')
	script(type="text/javascript").
		var incoming = $('.data-json').val();
		var data = JSON.parse(incoming);
		var margin = {top: 20, right: 30, bottom: 30, left: 50};
		var width = 960 - margin.left - margin.right;
		var height = 500 - margin.top - margin.bottom;

		var parseDate = d3.time.format("%Y%m%d").parse;

		var minX = d3.min(data, function (kv) { return d3.min(kv.values, function (d) { return d.unixdate; }) });
		var maxX = d3.max(data, function (kv) { return d3.max(kv.values, function (d) { return d.unixdate; }) });
		var minY = d3.min(data, function (kv) { return d3.min(kv.values, function (d) { return d.close; }) });
		var maxY = d3.max(data, function (kv) { return d3.max(kv.values, function (d) { return d.close; }) });

		var time = d3.time.scale().domain([data[0].values[0].date, data[data.length-1].values[data[data.length-1].values.length-1].date])
		var x = d3.scale.linear().domain([minX, maxX]).range([0, width]);

		var y = d3.scale.linear().domain([minY, maxY]).range([height, 0]);

		var xAxis = d3.svg.axis().scale(time).tickSize(-height).tickPadding(10).tickSubdivide(true).orient("bottom");	

		var yAxis = d3.svg.axis().scale(y).tickPadding(10).tickSize(-width).tickSubdivide(true).orient("left");

		var zoom = d3.behavior.zoom().x(x).y(y).scaleExtent([1, 10]).on("zoom", zoomed);	

		var svg = d3.select("#chart").append("svg").call(zoom).attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);

		svg.append("g").attr("class", "y axis").call(yAxis);

		svg.append("g").attr("class", "y axis").append("text").attr("class", "axis-label").attr("transform", "rotate(-90)").attr("y", (-margin.left) + 10).attr("x", -height/2).text('$tock price');	

		svg.append("clipPath").attr("id", "clip").append("rect").attr("width", width).attr("height", height);

		var color = d3.scale.category10();
		color.domain(data.map(function (d) { return d.key; }));


		var line = svg.selectAll(".line").data(data).enter().append("g").attr("class", "line").attr("clip-path", "url(#clip)");

		line.append("path").attr("class", "line").attr("d", function (d) { return line(d.values); }).style("stroke", function (d) { return color(d.key); });

		line.append("text").datum(function (d) { return { name: d.key, date: d.values[d.values.length - 1].date, value: d.values[d.values.length - 1].close  }; }).attr("transform", function (d) { return "translate(" + x(d.date) + "," + y(d.value) + ")"; }).attr("x", 3).attr("dy", ".35em").text(function (d) { return d.name; });	

		var points = svg.selectAll('.dots').data(data).enter().append("g").attr("class", "dots").attr("clip-path", "url(#clip)");	

		points.selectAll('.dot').data(function(d, index){ var a = []; d.forEach(function(point,i){ a.push({'index': index, 'point': point}); }); return a; }).enter().append('circle').attr('class','dot').attr("r", 2.5).attr('fill', function(d,i){ return color(d.point.key); }).attr("transform", function(d) { return "translate(" + x(d.point.date) + "," + y(d.point.close) + ")"; });	

		function zoomed() { svg.select(".x.axis").call(xAxis); svg.select(".y.axis").call(yAxis); svg.selectAll('path.line').attr('d', line); points.selectAll('circle').attr("transform", function(d) { return "translate(" + x(d.point.date) + "," + y(d.point.close) + ")"; }); }